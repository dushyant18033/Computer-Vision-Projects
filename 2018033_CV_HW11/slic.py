# 2018033_CV_HW11.py
# Name: Dushyant Panchal
# Rollno: 2018033


import cv2
import sys
import numpy as np


# input the image to np array
image = cv2.imread(sys.argv[1])

# image = cv2.cvtColor(image,cv2.COLOR_BGR2LAB)

# making a copy
img = image.copy()

# SLIC initialization
slic = cv2.ximgproc.createSuperpixelSLIC(img, algorithm = cv2.ximgproc.SLICO, region_size=16)
slic.iterate()


# obtaining clusters generated by the slic algorithm
num_super_pixels = slic.getNumberOfSuperpixels()
cluster_center = np.zeros((num_super_pixels, 5))
cluster_size = np.zeros(num_super_pixels)
cluster_labels = slic.getLabels()


# calculating cluster centers
for i in range(img.shape[0]):
    for j in range(img.shape[1]):
        sp_id = cluster_labels[i,j]
        cluster_center[sp_id,:] += np.array([ img[i,j,0], img[i,j,1], img[i,j,2], i, j ])
        cluster_size[sp_id] += 1

# dividing by cluster size to obtain the mean
for i in range(num_super_pixels):
    cluster_center[i] /= cluster_size[i]


# calc diagonal length
diagonal = (img.shape[0]**2 + img.shape[1]**2)**0.5
# for normalizing color component
col_diff_max = ((255**2)*3)**0.5

# saliency map for super pixels
saliency = np.zeros(num_super_pixels)
for i in range(num_super_pixels):
    for j in range(num_super_pixels):
        
        # color component
        col_i = cluster_center[i,:3]
        col_j = cluster_center[j,:3]
        col_dist = np.sum( (col_i - col_j)**2 )**0.5

        # spacial component
        loc_i = cluster_center[i,3:]
        loc_j = cluster_center[j,3:]
        sp_dist = np.sum( (loc_i - loc_j)**2 )**0.5

        # combining the two
        saliency[i] += (col_dist/col_diff_max)*np.exp(-(sp_dist/diagonal))

# normalize the saliency
saliency/=np.max(saliency)


# clustered image after 'slic'
for i in range(img.shape[0]):
    for j in range(img.shape[1]):
        sp_id = cluster_labels[i,j]
        img[i,j,:]=[ cluster_center[sp_id,0], cluster_center[sp_id,1], cluster_center[sp_id,2] ]


# SLIC clusters contours
img1 = slic.getLabelContourMask()
for i in range(img.shape[0]):
    for j in range(img.shape[1]):
        if img1[i,j]==255:
            img[i,j,:]=[255,255,255]


# generating saliency map for original image
img_sal = np.zeros(img.shape)
for i in range(img.shape[0]):
    for j in range(img.shape[1]):
        sp_id = cluster_labels[i,j]
        img_sal[i,j] = saliency[sp_id]


print(saliency)

cv2.imshow('input', image)
cv2.imshow('slic countours', img1)
cv2.imshow('slic output', img)
cv2.imshow('saliency map', img_sal)
cv2.waitKey(0)